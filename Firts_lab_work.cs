/* В комментариях к этому коду я говорю о себе во множественном
числе. */
// System, так как иначе онлайн-компилятор вернёт ошибку.
using System;

// Привет, мир! По старой программистской традиции
Console.WriteLine("Hello, world!");

/* Абстрактный класс для бытовой техники, 
так как в человеческом представлении она выражена в общем виде */

public abstract class Appliance
{	//Производитель и цвет задаются словами
    public string Manufacturer { get; set; }
    public string Color { get; set; }
}

/*	Каждый класс, кроме газовой плиты, реализует интерфейс энергопотребления.
	то нужно, чтобы не сломать иерархическую структуру и позволить
	им всем потреблять электричество.

	Помиом интерфейса энергопотребления, классы СВЧ-печи и посудомоечной 
	машины реализуют интерфейс для учёта числа режимов.
	
	Газовая плита имеет число режимов, но не имеет энергопотребления,
	потому она реализует интерфейс числа режимов и не реализует
	интерфейс энергопотребления. */

// Интерфейс для учета энергопотребления
public interface IEnergyConsumption
{	/* Тип данных "decimal" выбран, 
	чтобы не задумываться о том, 
	какое число энергии будет израсходовано */
    decimal EnergyClass { get; set; }
}

// Интерфейс для учёта числа режимов
public interface IModesCount
{	/* Здесь и далее число режимов задаём целым числом по очевидной причине.
	   Здесь и далее под очевидными причинами понимаются условности нашего
	   мира конечных величин и бытовые особенности применения описываемых
	   устройств. Число режимов, энергопотребление и прочее не может быть 
	   бесконечным. */
	
    int ModesCount { get; set; }
}

/* Все классы наследуют класс бытовой техники по очевидным причинам.
   По тем же очевидным причинам они реализую интерфейс энергопотребления.*/
   
// Утюг
public class Iron : Appliance, IEnergyConsumption
{	// Набор функций Features записан строкой, потому что в ином нет нужды.
	// Принимая такое решение, мы исходим из того, что это просто текст на этикетке.
    public string Features { get; set; }
	/* Здесь и далее класс энергопотребления описан самым большим числом 
	с плавающей точкой. Сделано это ради того, чтобы избежать лишних мыслей. */
    public decimal EnergyClass { get; set; }
}

// Стиральная машина
public class WashingMachine : Appliance, IEnergyConsumption
{
    public decimal EnergyClass { get; set; }
	/* Из-за неоднозначности описания задачи, мы используем метод для загрузки белья,
	а не текстовое описание процедуры, которое может быть реализовано в качестве вывода
	его в консоль при использовании метода класса стиральной машины. */
	public void LoadClothes(){}
}

// Газовая плита
public class GasStove : Appliance, IModesCount
{
	// Число комфорок и режимов - целочисленное по очевидным прчиинам.
    public int BurnersCount { get; set; }
    public int ModesCount { get; set; }
	/* На вопрос "Встраиваемая ли плита?" можно дать ответ либо "Да", либо "Нет",
	что отсылает нас к двоичной логике, потому свойство встраиваемости представлено 
	в качестве логического значения нуля или единицы. */
    public bool BuiltIn { get; set; }
}

// СВЧ-печь
public class Microwave : Appliance, IEnergyConsumption, IModesCount
{	/* Мощность мы выражаем через самое большое число с плавающей точкой,
	так как не знаем, что туда будет записано, но думаем, что это будет число */
    public decimal Power { get; set; }
	public int ModesCount { get; set; }
    public decimal EnergyClass { get; set; }
}

// Посудомоечная машина
public class Dishwasher : Appliance, IEnergyConsumption, IModesCount
{	/* Всё было объяснено ранее. То, как описан данный класс, следует
	из всего сказанного ранее. */
	public int ModesCount { get; set; }
    public decimal EnergyClass { get; set; }
}